gs;;
  Group Safely; macro for "*gc*,*gr*,*cw*,*rs*"; almost
  always a win.

ga;;
  Group Aggressively (row subsumption); macro for
  "*gc*,*rs*,*ru*,*cw*,*rs*"; can be a huge win, but in some
  cases causes slower state space generation.

gsa;;
  Group Simulated Annealing; macro for "*gc*,*gr*,*csa*,*rs*"; almost
  always a win; usually better than *gs*.

gc;;
  Group Columns; macro for "*cs*,*cn*".

gr;;
  Group Rows; macro for "*rs*,*rn*".

cs;;
  Column Sort; sort columns lexicographically.

cn;;
  Column Nub; (temporarily) group duplicate columns, thereby making
  'ca' more tractable.  Requires *cs*.

cw;;
  Column sWap; minimize distance between columns by swapping them
  heuristically.  This reordering improves performance of the symbolic
  data structures.

ca;;
  Column All permutations; try to find the column permutation with the
  best cost metric.  Potentially, this is an expensive operation.

csa;;
  Column Simulated Annealing; minimize distance between columns by
  swapping them using simulated annealing.

rs;;
  Row Sort; sort rows lexicographically.

rn;;
  Row Nub; remove duplicate rows from the dependency matrix.  This is
  always a win.  Requires *rs*.

ru;;
  Row sUbsume; try to remove more rows than nubbing, thereby trading
  speed for memory.  Requires *rs*.

w2W;;
  Over-approximate all must-write to may-write. May-write supports the copy (-) dependency.
    
r2+;;
  Over-approximate read to read+write. Allows read dependencies to also subsume write dependencies.
  
w2+;;
  Over-approximate must-write to read+write. Allows must-write dependencies to also subsume read dependencies.

W2+;;
  Over-approximate may-write to read+write. Allows must-write dependencies to also subsume read dependencies.

rb4w;;
  Use special heuristics to move read dependencies before write dependences. Often a win in symbolic state space generation.

wi;;
  Writes information of the selected (*sr*, *sw*, *sc*) matrix to standard error. The following metrics are printed:
  . Row bandwidth: the maximum distance of between non-copy entries of all rows. 
  . Row profile: the sum of distances between non-copy entries of all rows.
  . Row max wavefront: the maximum wavefront of all rows.
  . Row avg wavefront: the average wavefront of all rows.
  . Row RMS wavefront: the Root Mean Square wavefront of all rows.
  . Col bandwidth: the maximum distance of between non-copy entries of all columns. 
  . Col profile: the sum of distances between non-copy entries of all columns.
  . Col max wavefront: the maximum wavefront of all columns.
  . Col avg wavefront: the average wavefront of all columns.
  . Col RMS wavefront: the Root Mean Square wavefront of all columns.
  . Bandwidth: the maximum value of the row bandwidth and the column bandwidth.
  . Profile: the sum of the row profile and the column profile.
  . Max wavefront: the maximum value of the row maximum wavefront and column maximum wavefront.
  . Avg wavefront: the average wavefront of the row wavefront and column wavefront.
  . RMS wavefront: the Root Mean Square of the row wavefront and column wavefront.
  
sr;;
 Select the read matrix for *cs*, *csa*, *cw*, *ca*, *rs*, *bcm*, *bs*, *bk*, *vcm*, *vacm*, *vgps* and *mi*.
 
sw;;
 Select the write matrix (default) for *cs*, *csa*, *cw*, *ca*, *rs*, *bcm*, *bs*, *bk*, *vcm*, *vacm*, *vgps* and *mi*.
 The write matrix is the default selection, because only write dependencies can create new nodes in decision diagrams.
 A bad variable order in the write matrix thus leads to a large number of peak nodes during reachability analysis.
 A bad variable order in the read matrix can also lead to a slow reachability analysis, but typically
 not as severe as a bad variable order in the write matrix. Slow reachability analysis due to a bad variable order
 in the read matrix causes many recursive calls to the relational product operation. Typically it is best that read 
 dependencies are moved to the top DD level, thus left most in the read matrix.
  
sc;;
 Select the combined matrix for *cs*, *csa*, *cw*, *ca*, *rs*, *bcm*, *bs*, *bk*, *vcm*, *vacm*, *vgps* and *mi*.
 The combined matrix is the logical or of the read and write matrix.
  
bg;;
  Use a bipartite graph (default) for *bcm*, *bk*, *bs*, *vcm*, *vacm* and *vgps*.

tg;;
  Create a total graph of the bipartite graph for *bcm*, *bk*, *bs*, *vcm*, *vacm* and *vgps*.
  This adds more vertices and edges thus increasing computation time, but sometimes provides a better ordering.
  
bcm;;
  Apply Boost's Cuthill-McKee ordering.
  
bk;;
  Apply Boost's King ordering.

bs;;
  Apply Boost's Sloan ordering.
  
vcm;;
  Apply ViennaCL's Cuthill-McKee ordering.
  
vacm;;
  Apply ViennaCL's advanced Cuthill-McKee ordering.
  
vgps;;
  Apply ViennaCl's Gibbs-Poole-Stockmeyer ordering.
